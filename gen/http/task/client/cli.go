// Code generated by goa v3.14.1, DO NOT EDIT.
//
// task HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	task "backend/gen/task"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildListPayload builds the payload for the task list endpoint from CLI
// flags.
func BuildListPayload(taskListLimit string, taskListOffset string, taskListName string, taskListToken string) (*task.ListPayload, error) {
	var err error
	var limit uint32
	{
		if taskListLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(taskListLimit, 10, 32)
			limit = uint32(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT32")
			}
		}
	}
	var offset uint32
	{
		if taskListOffset != "" {
			var v uint64
			v, err = strconv.ParseUint(taskListOffset, 10, 32)
			offset = uint32(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be UINT32")
			}
		}
	}
	var name string
	{
		if taskListName != "" {
			name = taskListName
		}
	}
	var token *string
	{
		if taskListToken != "" {
			token = &taskListToken
		}
	}
	v := &task.ListPayload{}
	v.Limit = limit
	v.Offset = offset
	v.Name = name
	v.Token = token

	return v, nil
}

// BuildShowPayload builds the payload for the task show endpoint from CLI
// flags.
func BuildShowPayload(taskShowID string, taskShowToken string) (*task.ShowPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(taskShowID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	var token *string
	{
		if taskShowToken != "" {
			token = &taskShowToken
		}
	}
	v := &task.ShowPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the task create endpoint from CLI
// flags.
func BuildCreatePayload(taskCreateBody string, taskCreateToken string) (*task.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(taskCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"created_by\": \"Quis ratione id nesciunt suscipit vel et.\",\n      \"description\": \"Accusamus sit delectus ipsum.\",\n      \"id\": 3284785714,\n      \"name\": \"Tempora ad.\"\n   }'")
		}
	}
	var token *string
	{
		if taskCreateToken != "" {
			token = &taskCreateToken
		}
	}
	v := &task.CreatePayload{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		CreatedBy:   body.CreatedBy,
	}
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the task update endpoint from CLI
// flags.
func BuildUpdatePayload(taskUpdateBody string, taskUpdateID string, taskUpdateToken string) (*task.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(taskUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Placeat accusamus odio consectetur debitis aut.\",\n      \"name\": \"Velit numquam adipisci nam.\"\n   }'")
		}
	}
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(taskUpdateID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	var token *string
	{
		if taskUpdateToken != "" {
			token = &taskUpdateToken
		}
	}
	v := &task.UpdatePayload{
		Name:        body.Name,
		Description: body.Description,
	}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildDonePayload builds the payload for the task done endpoint from CLI
// flags.
func BuildDonePayload(taskDoneBody string, taskDoneID string, taskDoneToken string) (*task.DonePayload, error) {
	var err error
	var body DoneRequestBody
	{
		err = json.Unmarshal([]byte(taskDoneBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"done_by\": \"Pariatur fugiat asperiores illo sed.\"\n   }'")
		}
	}
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(taskDoneID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	var token *string
	{
		if taskDoneToken != "" {
			token = &taskDoneToken
		}
	}
	v := &task.DonePayload{
		DoneBy: body.DoneBy,
	}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the task delete endpoint from CLI
// flags.
func BuildDeletePayload(taskDeleteID string, taskDeleteToken string) (*task.DeletePayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(taskDeleteID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	var token *string
	{
		if taskDeleteToken != "" {
			token = &taskDeleteToken
		}
	}
	v := &task.DeletePayload{}
	v.ID = id
	v.Token = token

	return v, nil
}
