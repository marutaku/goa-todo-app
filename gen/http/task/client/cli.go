// Code generated by goa v3.14.1, DO NOT EDIT.
//
// task HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	task "backend/gen/task"
	"fmt"
	"strconv"
)

// BuildListPayload builds the payload for the task list endpoint from CLI
// flags.
func BuildListPayload(taskListLimit string, taskListOffset string) (*task.ListPayload, error) {
	var err error
	var limit uint32
	{
		if taskListLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(taskListLimit, 10, 32)
			limit = uint32(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT32")
			}
		}
	}
	var offset uint32
	{
		if taskListOffset != "" {
			var v uint64
			v, err = strconv.ParseUint(taskListOffset, 10, 32)
			offset = uint32(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be UINT32")
			}
		}
	}
	v := &task.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildShowPayload builds the payload for the task show endpoint from CLI
// flags.
func BuildShowPayload(taskShowID string) (*task.ShowPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(taskShowID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	v := &task.ShowPayload{}
	v.ID = id

	return v, nil
}
