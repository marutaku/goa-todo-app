// Code generated by goa v3.14.1, DO NOT EDIT.
//
// task HTTP client types
//
// Command:
// $ goa gen backend/design

package client

import (
	task "backend/gen/task"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "task" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// ID of task to create
	ID *uint32 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the task
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the task
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Who created the task
	CreatedBy string `form:"created_by" json:"created_by" xml:"created_by"`
}

// UpdateRequestBody is the type of the "task" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// Name of the task
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the task
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// DoneRequestBody is the type of the "task" service "done" endpoint HTTP
// request body.
type DoneRequestBody struct {
	// Who did the task
	DoneBy string `form:"done_by" json:"done_by" xml:"done_by"`
}

// ListResponseBody is the type of the "task" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// List of tasks
	Tasks BackendStoredTaskCollectionResponseBody `form:"tasks,omitempty" json:"tasks,omitempty" xml:"tasks,omitempty"`
}

// ShowResponseBody is the type of the "task" service "show" endpoint HTTP
// response body.
type ShowResponseBody struct {
	// task to show
	Task *BackendStoredTaskResponseBody `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// CreateResponseBody is the type of the "task" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// Created task
	Task *BackendStoredTaskResponseBody `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// UpdateResponseBody is the type of the "task" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// Updated task
	Task *BackendStoredTaskResponseBody `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// DoneResponseBody is the type of the "task" service "done" endpoint HTTP
// response body.
type DoneResponseBody struct {
	// Finished task
	Task *BackendStoredTaskResponseBody `form:"task,omitempty" json:"task,omitempty" xml:"task,omitempty"`
}

// ListTokenVerificationFailedResponseBody is the type of the "task" service
// "list" endpoint HTTP response body for the "token_verification_failed" error.
type ListTokenVerificationFailedResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ShowTokenVerificationFailedResponseBody is the type of the "task" service
// "show" endpoint HTTP response body for the "token_verification_failed" error.
type ShowTokenVerificationFailedResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ShowTaskNotFoundResponseBody is the type of the "task" service "show"
// endpoint HTTP response body for the "task_not_found" error.
type ShowTaskNotFoundResponseBody struct {
	// reason for failure
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Name of the error
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateTokenVerificationFailedResponseBody is the type of the "task" service
// "create" endpoint HTTP response body for the "token_verification_failed"
// error.
type CreateTokenVerificationFailedResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateTokenVerificationFailedResponseBody is the type of the "task" service
// "update" endpoint HTTP response body for the "token_verification_failed"
// error.
type UpdateTokenVerificationFailedResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateTaskNotFoundResponseBody is the type of the "task" service "update"
// endpoint HTTP response body for the "task_not_found" error.
type UpdateTaskNotFoundResponseBody struct {
	// reason for failure
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Name of the error
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// DoneTokenVerificationFailedResponseBody is the type of the "task" service
// "done" endpoint HTTP response body for the "token_verification_failed" error.
type DoneTokenVerificationFailedResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteTokenVerificationFailedResponseBody is the type of the "task" service
// "delete" endpoint HTTP response body for the "token_verification_failed"
// error.
type DeleteTokenVerificationFailedResponseBody struct {
	// Error message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// BackendStoredTaskCollectionResponseBody is used to define fields on response
// body types.
type BackendStoredTaskCollectionResponseBody []*BackendStoredTaskResponseBody

// BackendStoredTaskResponseBody is used to define fields on response body
// types.
type BackendStoredTaskResponseBody struct {
	// Unique ID
	ID *uint32 `gorm:"primaryKey" json:"id"`
	// Name of the todo
	Name *string `gorm:"not null" json:"name"`
	// Description of the todo
	Description *string `gorm:"not null;default ''" json:"description"`
	// Whether or not the todo is done
	Done *bool `gorm:"not null;default false" json:"done"`
	// When the todo was done in ISO format
	DoneAt *string `gorm:"default ''" json:"doneAt"`
	// Who did the todo
	DoneBy *string `gorm:"default ''" json:"doneBy"`
	// When the todo was created in ISO format
	CreatedAt *string `gorm:"not null" json:"createdAt"`
	// Who created the todo
	CreatedBy *string `gorm:"not null" json:"createdBy"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "task" service.
func NewCreateRequestBody(p *task.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		ID:          p.ID,
		Name:        p.Name,
		Description: p.Description,
		CreatedBy:   p.CreatedBy,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "task" service.
func NewUpdateRequestBody(p *task.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	return body
}

// NewDoneRequestBody builds the HTTP request body from the payload of the
// "done" endpoint of the "task" service.
func NewDoneRequestBody(p *task.DonePayload) *DoneRequestBody {
	body := &DoneRequestBody{
		DoneBy: p.DoneBy,
	}
	return body
}

// NewListResultOK builds a "task" service "list" endpoint result from a HTTP
// "OK" response.
func NewListResultOK(body *ListResponseBody) *task.ListResult {
	v := &task.ListResult{}
	if body.Tasks != nil {
		v.Tasks = make([]*task.BackendStoredTask, len(body.Tasks))
		for i, val := range body.Tasks {
			v.Tasks[i] = unmarshalBackendStoredTaskResponseBodyToTaskBackendStoredTask(val)
		}
	}

	return v
}

// NewListTokenVerificationFailed builds a task service list endpoint
// token_verification_failed error.
func NewListTokenVerificationFailed(body *ListTokenVerificationFailedResponseBody) *task.AuthFailed {
	v := &task.AuthFailed{
		Message: *body.Message,
	}

	return v
}

// NewShowResultOK builds a "task" service "show" endpoint result from a HTTP
// "OK" response.
func NewShowResultOK(body *ShowResponseBody) *task.ShowResult {
	v := &task.ShowResult{}
	if body.Task != nil {
		v.Task = unmarshalBackendStoredTaskResponseBodyToTaskBackendStoredTask(body.Task)
	}

	return v
}

// NewShowTokenVerificationFailed builds a task service show endpoint
// token_verification_failed error.
func NewShowTokenVerificationFailed(body *ShowTokenVerificationFailedResponseBody) *task.AuthFailed {
	v := &task.AuthFailed{
		Message: *body.Message,
	}

	return v
}

// NewShowTaskNotFound builds a task service show endpoint task_not_found error.
func NewShowTaskNotFound(body *ShowTaskNotFoundResponseBody) *task.TaskNotFound {
	v := &task.TaskNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewCreateResultCreated builds a "task" service "create" endpoint result from
// a HTTP "Created" response.
func NewCreateResultCreated(body *CreateResponseBody) *task.CreateResult {
	v := &task.CreateResult{}
	if body.Task != nil {
		v.Task = unmarshalBackendStoredTaskResponseBodyToTaskBackendStoredTask(body.Task)
	}

	return v
}

// NewCreateTokenVerificationFailed builds a task service create endpoint
// token_verification_failed error.
func NewCreateTokenVerificationFailed(body *CreateTokenVerificationFailedResponseBody) *task.AuthFailed {
	v := &task.AuthFailed{
		Message: *body.Message,
	}

	return v
}

// NewUpdateResultOK builds a "task" service "update" endpoint result from a
// HTTP "OK" response.
func NewUpdateResultOK(body *UpdateResponseBody) *task.UpdateResult {
	v := &task.UpdateResult{}
	if body.Task != nil {
		v.Task = unmarshalBackendStoredTaskResponseBodyToTaskBackendStoredTask(body.Task)
	}

	return v
}

// NewUpdateTokenVerificationFailed builds a task service update endpoint
// token_verification_failed error.
func NewUpdateTokenVerificationFailed(body *UpdateTokenVerificationFailedResponseBody) *task.AuthFailed {
	v := &task.AuthFailed{
		Message: *body.Message,
	}

	return v
}

// NewUpdateTaskNotFound builds a task service update endpoint task_not_found
// error.
func NewUpdateTaskNotFound(body *UpdateTaskNotFoundResponseBody) *task.TaskNotFound {
	v := &task.TaskNotFound{
		Message: *body.Message,
		Name:    *body.Name,
	}

	return v
}

// NewDoneResultOK builds a "task" service "done" endpoint result from a HTTP
// "OK" response.
func NewDoneResultOK(body *DoneResponseBody) *task.DoneResult {
	v := &task.DoneResult{}
	if body.Task != nil {
		v.Task = unmarshalBackendStoredTaskResponseBodyToTaskBackendStoredTask(body.Task)
	}

	return v
}

// NewDoneTokenVerificationFailed builds a task service done endpoint
// token_verification_failed error.
func NewDoneTokenVerificationFailed(body *DoneTokenVerificationFailedResponseBody) *task.AuthFailed {
	v := &task.AuthFailed{
		Message: *body.Message,
	}

	return v
}

// NewDeleteTokenVerificationFailed builds a task service delete endpoint
// token_verification_failed error.
func NewDeleteTokenVerificationFailed(body *DeleteTokenVerificationFailedResponseBody) *task.AuthFailed {
	v := &task.AuthFailed{
		Message: *body.Message,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Tasks != nil {
		if err2 := ValidateBackendStoredTaskCollectionResponseBody(body.Tasks); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateShowResponseBody runs the validations defined on ShowResponseBody
func ValidateShowResponseBody(body *ShowResponseBody) (err error) {
	if body.Task != nil {
		if err2 := ValidateBackendStoredTaskResponseBody(body.Task); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.Task != nil {
		if err2 := ValidateBackendStoredTaskResponseBody(body.Task); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.Task != nil {
		if err2 := ValidateBackendStoredTaskResponseBody(body.Task); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateDoneResponseBody runs the validations defined on DoneResponseBody
func ValidateDoneResponseBody(body *DoneResponseBody) (err error) {
	if body.Task != nil {
		if err2 := ValidateBackendStoredTaskResponseBody(body.Task); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateListTokenVerificationFailedResponseBody runs the validations defined
// on list_token_verification_failed_response_body
func ValidateListTokenVerificationFailedResponseBody(body *ListTokenVerificationFailedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateShowTokenVerificationFailedResponseBody runs the validations defined
// on show_token_verification_failed_response_body
func ValidateShowTokenVerificationFailedResponseBody(body *ShowTokenVerificationFailedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateShowTaskNotFoundResponseBody runs the validations defined on
// show_task_not_found_response_body
func ValidateShowTaskNotFoundResponseBody(body *ShowTaskNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCreateTokenVerificationFailedResponseBody runs the validations
// defined on create_token_verification_failed_response_body
func ValidateCreateTokenVerificationFailedResponseBody(body *CreateTokenVerificationFailedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTokenVerificationFailedResponseBody runs the validations
// defined on update_token_verification_failed_response_body
func ValidateUpdateTokenVerificationFailedResponseBody(body *UpdateTokenVerificationFailedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateTaskNotFoundResponseBody runs the validations defined on
// update_task_not_found_response_body
func ValidateUpdateTaskNotFoundResponseBody(body *UpdateTaskNotFoundResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateDoneTokenVerificationFailedResponseBody runs the validations defined
// on done_token_verification_failed_response_body
func ValidateDoneTokenVerificationFailedResponseBody(body *DoneTokenVerificationFailedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteTokenVerificationFailedResponseBody runs the validations
// defined on delete_token_verification_failed_response_body
func ValidateDeleteTokenVerificationFailedResponseBody(body *DeleteTokenVerificationFailedResponseBody) (err error) {
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateBackendStoredTaskCollectionResponseBody runs the validations defined
// on BackendStored-TaskCollectionResponseBody
func ValidateBackendStoredTaskCollectionResponseBody(body BackendStoredTaskCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateBackendStoredTaskResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateBackendStoredTaskResponseBody runs the validations defined on
// BackendStored-TaskResponseBody
func ValidateBackendStoredTaskResponseBody(body *BackendStoredTaskResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Done == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("done", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.CreatedBy == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdBy", "body"))
	}
	return
}
