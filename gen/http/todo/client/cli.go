// Code generated by goa v3.14.1, DO NOT EDIT.
//
// todo HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	todo "backend/gen/todo"
	"fmt"
	"strconv"
)

// BuildListPayload builds the payload for the todo list endpoint from CLI
// flags.
func BuildListPayload(todoListLimit string, todoListOffset string) (*todo.ListPayload, error) {
	var err error
	var limit uint32
	{
		if todoListLimit != "" {
			var v uint64
			v, err = strconv.ParseUint(todoListLimit, 10, 32)
			limit = uint32(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be UINT32")
			}
		}
	}
	var offset uint32
	{
		if todoListOffset != "" {
			var v uint64
			v, err = strconv.ParseUint(todoListOffset, 10, 32)
			offset = uint32(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for offset, must be UINT32")
			}
		}
	}
	v := &todo.ListPayload{}
	v.Limit = limit
	v.Offset = offset

	return v, nil
}

// BuildShowPayload builds the payload for the todo show endpoint from CLI
// flags.
func BuildShowPayload(todoShowID string) (*todo.ShowPayload, error) {
	var err error
	var id uint32
	{
		var v uint64
		v, err = strconv.ParseUint(todoShowID, 10, 32)
		id = uint32(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be UINT32")
		}
	}
	v := &todo.ShowPayload{}
	v.ID = id

	return v, nil
}
