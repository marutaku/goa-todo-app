// Code generated by goa v3.14.1, DO NOT EDIT.
//
// auth HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	auth "backend/gen/auth"

	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "auth" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Username to login with
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password to login with
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// RegisterRequestBody is the type of the "auth" service "register" endpoint
// HTTP request body.
type RegisterRequestBody struct {
	// Username to register with
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password to register with
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// LoginResponseBody is the type of the "auth" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// JWT token to use for authentication
	Token string `form:"token" json:"token" xml:"token"`
}

// RegisterResponseBody is the type of the "auth" service "register" endpoint
// HTTP response body.
type RegisterResponseBody struct {
	// JWT token to use for authentication
	Token string `form:"token" json:"token" xml:"token"`
}

// LoginLoginFailedResponseBody is the type of the "auth" service "login"
// endpoint HTTP response body for the "login_failed" error.
type LoginLoginFailedResponseBody struct {
	// reason for failure
	Message string `form:"message" json:"message" xml:"message"`
	// Name of the error
	Name string `form:"name" json:"name" xml:"name"`
}

// RegisterRegisterFailedResponseBody is the type of the "auth" service
// "register" endpoint HTTP response body for the "register_failed" error.
type RegisterRegisterFailedResponseBody struct {
	// reason for failure
	Message string `form:"message" json:"message" xml:"message"`
	// Name of the error
	Name string `form:"name" json:"name" xml:"name"`
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "auth" service.
func NewLoginResponseBody(res *auth.LoginResult) *LoginResponseBody {
	body := &LoginResponseBody{
		Token: res.Token,
	}
	return body
}

// NewRegisterResponseBody builds the HTTP response body from the result of the
// "register" endpoint of the "auth" service.
func NewRegisterResponseBody(res *auth.RegisterResult) *RegisterResponseBody {
	body := &RegisterResponseBody{
		Token: res.Token,
	}
	return body
}

// NewLoginLoginFailedResponseBody builds the HTTP response body from the
// result of the "login" endpoint of the "auth" service.
func NewLoginLoginFailedResponseBody(res *auth.AuthFlowFailed) *LoginLoginFailedResponseBody {
	body := &LoginLoginFailedResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewRegisterRegisterFailedResponseBody builds the HTTP response body from the
// result of the "register" endpoint of the "auth" service.
func NewRegisterRegisterFailedResponseBody(res *auth.AuthFlowFailed) *RegisterRegisterFailedResponseBody {
	body := &RegisterRegisterFailedResponseBody{
		Message: res.Message,
		Name:    res.Name,
	}
	return body
}

// NewLoginPayload builds a auth service login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *auth.LoginPayload {
	v := &auth.LoginPayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewRegisterPayload builds a auth service register endpoint payload.
func NewRegisterPayload(body *RegisterRequestBody) *auth.RegisterPayload {
	v := &auth.RegisterPayload{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateRegisterRequestBody runs the validations defined on
// RegisterRequestBody
func ValidateRegisterRequestBody(body *RegisterRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
