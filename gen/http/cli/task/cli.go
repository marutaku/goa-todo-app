// Code generated by goa v3.14.1, DO NOT EDIT.
//
// task HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package cli

import (
	authc "backend/gen/http/auth/client"
	taskc "backend/gen/http/task/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `auth (login|register|logout)
task (list|show|create|update)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` auth login --body '{
      "password": "Voluptas deleniti earum praesentium non dolorum laboriosam.",
      "username": "Dicta reiciendis est."
   }'` + "\n" +
		os.Args[0] + ` task list --limit 3325048348 --offset 2280797127` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		authFlags = flag.NewFlagSet("auth", flag.ContinueOnError)

		authLoginFlags    = flag.NewFlagSet("login", flag.ExitOnError)
		authLoginBodyFlag = authLoginFlags.String("body", "REQUIRED", "")

		authRegisterFlags    = flag.NewFlagSet("register", flag.ExitOnError)
		authRegisterBodyFlag = authRegisterFlags.String("body", "REQUIRED", "")

		authLogoutFlags    = flag.NewFlagSet("logout", flag.ExitOnError)
		authLogoutBodyFlag = authLogoutFlags.String("body", "REQUIRED", "")

		taskFlags = flag.NewFlagSet("task", flag.ContinueOnError)

		taskListFlags      = flag.NewFlagSet("list", flag.ExitOnError)
		taskListLimitFlag  = taskListFlags.String("limit", "20", "")
		taskListOffsetFlag = taskListFlags.String("offset", "", "")

		taskShowFlags  = flag.NewFlagSet("show", flag.ExitOnError)
		taskShowIDFlag = taskShowFlags.String("id", "REQUIRED", "ID of task to show")

		taskCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		taskCreateBodyFlag = taskCreateFlags.String("body", "REQUIRED", "")

		taskUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		taskUpdateBodyFlag = taskUpdateFlags.String("body", "REQUIRED", "")
		taskUpdateIDFlag   = taskUpdateFlags.String("id", "REQUIRED", "ID of task to update")
	)
	authFlags.Usage = authUsage
	authLoginFlags.Usage = authLoginUsage
	authRegisterFlags.Usage = authRegisterUsage
	authLogoutFlags.Usage = authLogoutUsage

	taskFlags.Usage = taskUsage
	taskListFlags.Usage = taskListUsage
	taskShowFlags.Usage = taskShowUsage
	taskCreateFlags.Usage = taskCreateUsage
	taskUpdateFlags.Usage = taskUpdateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "auth":
			svcf = authFlags
		case "task":
			svcf = taskFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "auth":
			switch epn {
			case "login":
				epf = authLoginFlags

			case "register":
				epf = authRegisterFlags

			case "logout":
				epf = authLogoutFlags

			}

		case "task":
			switch epn {
			case "list":
				epf = taskListFlags

			case "show":
				epf = taskShowFlags

			case "create":
				epf = taskCreateFlags

			case "update":
				epf = taskUpdateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "auth":
			c := authc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "login":
				endpoint = c.Login()
				data, err = authc.BuildLoginPayload(*authLoginBodyFlag)
			case "register":
				endpoint = c.Register()
				data, err = authc.BuildRegisterPayload(*authRegisterBodyFlag)
			case "logout":
				endpoint = c.Logout()
				data, err = authc.BuildLogoutPayload(*authLogoutBodyFlag)
			}
		case "task":
			c := taskc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = taskc.BuildListPayload(*taskListLimitFlag, *taskListOffsetFlag)
			case "show":
				endpoint = c.Show()
				data, err = taskc.BuildShowPayload(*taskShowIDFlag)
			case "create":
				endpoint = c.Create()
				data, err = taskc.BuildCreatePayload(*taskCreateBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = taskc.BuildUpdatePayload(*taskUpdateBodyFlag, *taskUpdateIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// authUsage displays the usage of the auth command and its subcommands.
func authUsage() {
	fmt.Fprintf(os.Stderr, `The auth service manages authentication
Usage:
    %[1]s [globalflags] auth COMMAND [flags]

COMMAND:
    login: Login to the system
    register: Register a new user
    logout: Logout of the system

Additional help:
    %[1]s auth COMMAND --help
`, os.Args[0])
}
func authLoginUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth login -body JSON

Login to the system
    -body JSON: 

Example:
    %[1]s auth login --body '{
      "password": "Voluptas deleniti earum praesentium non dolorum laboriosam.",
      "username": "Dicta reiciendis est."
   }'
`, os.Args[0])
}

func authRegisterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth register -body JSON

Register a new user
    -body JSON: 

Example:
    %[1]s auth register --body '{
      "password": "Dolores vel aliquam a voluptas.",
      "username": "Laboriosam et libero deserunt voluptatibus similique."
   }'
`, os.Args[0])
}

func authLogoutUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] auth logout -body JSON

Logout of the system
    -body JSON: 

Example:
    %[1]s auth logout --body '{
      "token": "In voluptas id eos."
   }'
`, os.Args[0])
}

// taskUsage displays the usage of the task command and its subcommands.
func taskUsage() {
	fmt.Fprintf(os.Stderr, `The task service manages task lists
Usage:
    %[1]s [globalflags] task COMMAND [flags]

COMMAND:
    list: List all tasks
    show: Show a task
    create: Create a task
    update: Update a task

Additional help:
    %[1]s task COMMAND --help
`, os.Args[0])
}
func taskListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task list -limit UINT32 -offset UINT32

List all tasks
    -limit UINT32: 
    -offset UINT32: 

Example:
    %[1]s task list --limit 3325048348 --offset 2280797127
`, os.Args[0])
}

func taskShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task show -id UINT32

Show a task
    -id UINT32: ID of task to show

Example:
    %[1]s task show --id 1488275987
`, os.Args[0])
}

func taskCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task create -body JSON

Create a task
    -body JSON: 

Example:
    %[1]s task create --body '{
      "created_by": "Ut ducimus et consequatur aut.",
      "description": "Molestias mollitia odio.",
      "id": 3033221028,
      "name": "Non officiis minima voluptatem perferendis omnis."
   }'
`, os.Args[0])
}

func taskUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task update -body JSON -id UINT32

Update a task
    -body JSON: 
    -id UINT32: ID of task to update

Example:
    %[1]s task update --body '{
      "description": "Est qui harum quis qui.",
      "name": "Dolor voluptatem."
   }' --id 666905628
`, os.Args[0])
}
